{"abstractText": "The code was written to explore the question of how odour information is processed by the olfactory bulb. At the time it was impossible to measure simultaneously the spatial distribution and the temporal structure of neuronal activity in the bulb, so our goal was to develop a biologically \u2018realistic\u2019 model 1, validate it with respect to available data, then use it to explore properties of network activity in response to different forms of stimulation. The resulting model was the most realistic, largest\u2010scale model published at that time, although it has subsequently been surpassed in both these dimensions, of course (see [2], for example).", "authors": [{"affiliations": [], "name": "Andrew P. Davison"}, {"affiliations": [], "name": "Nicolas P. Rougier"}], "id": "SP:57087aee8b53f1f108f83c1992808fb6c78fdf28", "references": [{"authors": ["A.P. Davison", "J. Feng", "D. Brown"], "title": "Dendrodendritic inhibition and simulated odor responses in a detailed olfactory bulb network model.", "venue": "Journal of Neurophysiology", "year": 2003}, {"authors": ["Y. Yu", "T.S.McTavish", "M.L. Hines", "G.M. Shepherd", "C. Valenti", "andM.Migliore"], "title": "SparseDistributedRepresentation of Odors in a Large-scale Olfactory Bulb Circuit.", "venue": "PLOS Computational Biology", "year": 2013}, {"authors": ["W. Rall"], "title": "Distinguishing theoretical synaptic potentials computed for different soma-dendritic distributions of synaptic input.", "venue": "Journal of Neurophysiology", "year": 1967}, {"authors": ["U.S. Bhalla", "J.M. Bower"], "title": "Exploring parameter space in detailed single cell models: simulations of the mitral and granule cells of the olfactory bulb.", "venue": "Journal of Neurophysiology", "year": 1993}, {"authors": ["J.M. Bower andD. Beeman"], "title": "The Book of GENESIS: Exploring realistic neuralmodelswith the GEneral NEural SImulation System", "year": 1997}, {"authors": ["M.L. Hines", "N.T. Carnevale"], "title": "The NEURON simulation environment.", "venue": "Neural Computation", "year": 1997}, {"authors": ["A.P. Davison", "J. Feng", "D. Brown"], "title": "A reduced compartmental model of the mitral cell for use in network models of the olfactory bulb.", "venue": "Brain Research Bulletin", "year": 2000}, {"authors": ["M.L. Hines", "N.T. Carnevale"], "title": "Expanding NEURON\u2019s repertoire of mechanisms with NMODL.", "venue": "Neural Computation", "year": 2000}, {"authors": ["M.L. Hines", "N.T. Carnevale"], "title": "The NEURON Book", "year": 2006}, {"authors": ["B. Ermentrout.Simulating"], "title": "Analyzing, andAnimatingDynamical Systems: AGuide toXPPAUT for Researchers and Students", "venue": "Philadelphia, USA: SIAM,", "year": 2002}, {"authors": ["M.L. Hines", "T. Morse", "M. Migliore", "N.T. Carnevale", "G.M. Shepherd"], "title": "ModelDB: A Database to Support Computational Neuroscience.", "venue": "Journal of Computuational Neuroscience", "year": 2004}], "sections": [{"text": "R E S C I E N C E C Reproduction / Computational Neuroscience\n[Rp] Dendrodendritic inhibition and simulated odor responses in a detailed olfactory bulb network model\nAndrew P. Davison1, ID 1Universit\u00e9 Paris-Saclay, CNRS, Institut des neurosciences Paris-Saclay, 91190, Gif-sur-Yvette, France\nEdited by Tiziano Zito\nReviewed by Nicolas P. Rougier ID\nReceived 30 April 2020\nPublished 05 August 2020\nDOI 10.5281/zenodo.3972130\nThis article reports on the experience of reproducing a computational modelling study I originally carried out as part of my PhD studies, which was published as Davison, Feng, and Brown (2003)1.\n1 Historical context\n1.1 Scientific context The code was written to explore the question of how odour information is processed by the olfactory bulb. At the time it was impossible to measure simultaneously the spatial distribution and the temporal structure of neuronal activity in the bulb, so our goal was to develop a biologically \u2018realistic\u2019 model 1, validate it with respect to available data, then use it to explore properties of network activity in response to different forms of stimulation. The resulting model was the most realistic, largest\u2010scale model published at that time, although it has subsequently been surpassed in both these dimensions, of course (see [2], for example).\n1.2 Computational context The model consisted of compartmental models of mitral and granule cells, connected by phenomenological models of AMPA, NMDA and GABAA synapses. In computational neuroscience, compartmental modelling represents the spatially extended structure of neurons as branching electrical cables, then spatially discretizes the cable equation into isopotential compartments [3]. Compartmental models of the mitral and granule cells of the olfactory bulb had been developed previously by Bhalla and Bower (1993)4 for the GENESIS simulator[5], and I intended to build on this basis. However, although I was able to compile GENESIS itself on the DEC Alpha workstation which was the main com\u2010 putational workhorse of the lab, I was unsuccessful in compiling its associated graph\u2010 ical user interface (XODUS), probably due to my very limited computational training (self\u2010taught BASIC as a child, then an undergraduate class in FORTRAN for physicists and a graduate course in image processing using MATLAB). I therefore decided to at\u2010 tempt to port the models to different simulation software, NEURON [6], which I was able to compile in its entirety, GUI and all. This process took three months, the first month on the beautiful island of Crete, at the European computational neuroscience\n1as realistic as possible given the limitations of scientific knowledge about the olfactory bulb and the limi\u2010 tations of available computing resources at the time\nCopyright \u00a9 2020 A.P. Davison, released under a Creative Commons Attribution 4.0 International license. Correspondence should be addressed to Andrew P. Davison (andrew.davison@cnrs.fr) The authors have declared that no competing interests exist. Code is available at https://github.com/apdavison/bulbnet-reproduction. \u2013 SWH swh:1:rev:0899bc8af36b50d8cdf5d062562d2721f4602703. Open peer review is available at https://github.com/ReScience/submissions/issues/37.\nReScience C 6.1 (#14) \u2013 Davison 2020 1\nsummer school, held at the FORTH institute in Heraklion where I could benefit from hands\u2010on tutoring from Michael Hines, principal author of NEURON. The advantage of the porting process was that it required me to learn about both NEURON and GENE\u2010 SIS in considerable depth, as well as requiring me to understand more general theory about numerical solutions of differential equations. Finally, I was able to achieve near identical results from the two implementations (to better than nine significant figures, if I remember correctly), although the voltage\u2010gated calcium channels were a particular challenge. The next problem was that the neuron models, with several hundred compartments, each containing a half\u2010dozen ion channels or more, each of these with 3\u20104 coupled, stiff differential equations to solve (Hodgkin\u2010Huxley formalism), were computationally very expensive, and it was not possible to simulate very many of them at the same time, as was needed for a network model of the bulb. I therefore investigated the possibility of simplifying the geometric complexity of the neuronmodels, and found that amitral cell model reduced to four compartments and a granule cellmodelwith three compartments gave adequate results [7]. Models in theNEURON simulation environmentwerewritten in two languages: NMODL for ion channel and synapse models [8], a declarative specification that is used to gen\u2010 erate C\u2010code, which is then compiled and linked to the main NEURON executable; and Hoc [9] for creating neuron models, linking them in networks, and general program\u2010 ming (Hoc was my first introduction to object\u2010oriented programming) 2. Figures were mostly generated using Gnuplot (http://www.gnuplot.info/); Figures 15 and 16 were hand\u2010 written Postscript. Some data analysis was done interactively at the command line using awk, sed and other UNIX command\u2010line tools. The NMODLfiles tended to undergo little or no change after they were first developed. However, each new experiment resulted in copying, renaming and modifying multiple Hoc files. Essentially, every figure in the article was associated with a collection of Hoc files, with a core of code that was copied mostly unchanged from file to file, but considerable additional or ancillary code at each iteration.\n1.3 Reproducibility and replicability At this point, the head of the lab, David Brown, expressed concern about the accuracy of the NEURON simulator. NEURONwas a complex piece of software. How could I be sure that it was solving the differential equations correctly and with a sufficient level of accu\u2010 racy? To address this concern, I reimplemented the four\u2010compartmentmitral cellmodel using the XPPAUT differential equation solver [10] and obtained essentially identical re\u2010 sults (again, tomultiple significant figures). This experience, of portingmodels between three different simulators, impressed uponme the importance of cross\u2010validating simu\u2010 lation results across different implementations, and of the importance of checking the accuracy of numerical solutions, for example by reducing the integration time step until the results converge. Itmight be asked,whyuse simulation software at all, rather thanwrite code fromscratch, or based on lower\u2010level libraries? It became clear tome during this experience that there were two principal benefits. The first is increased productivity; since the programming environment for the simulator expresses domain\u2010specific concepts, models can be de\u2010 veloped more rapidly, without having to worry too much about low\u2010level details. The second benefit is reduced bugs; given the complexity of the domain that is being mod\u2010 elled, combining lower\u2010level libraries andwriting large amounts of code inevitably leads to bugs, and often results in hidden conceptual errors. It is usually better to use software that has been used and tested by many people over many years. This may seem obvious today, but the argument that it is essential to understand every detail of your code down\n2NEURON now allows the use of Python in the place of Hoc\nReScience C 6.1 (#14) \u2013 Davison 2020 2\nto the compiler, and that the best way to have this understanding is to write the code yourself, still carries considerable weight. As mentioned previously, I had little programming experience before starting my PhD studies, and no training in formal software development. At the beginning I was not aware of the existence of version control software. At some later point I encountered RCS and CVS, but they were not compelling enough for me to adopt them. It was not until Subversion came along a couple of years later that I started using formal version control. During this project, then, I used the time\u2010honoured version control method of copying the file and changing the file name. In summary, although reproducibility was not discussed with me by my supervisors as such, it was implicitly seen as an essential part of general scientific rigour. Similarly, although I did not explicitly have the idea that the re\u2010usability of the code I was writing was an important factor, I was building on previously published models and, perhaps more importantly, previously published code, since the GENESIS code for themitral and granule cells was distributed through BABEL, the GENESIS users\u2019 group, and without access to this code I could never have been certain that my NEURON implementation was really identical. I therefore implicitly had the expectation that the code I wrote might be used by others in future.\n1.4 Original source code Around the time that the article was nearing publication (2\u20103 years after submitting my thesis!), I decided to deposit a version of the code with the ModelDB repository [11], ac\u2010 cession number 2730. To strike a balance between promoting reproducibility and not discouraging submissions, the policy of ModelDB is that the deposited code must re\u2010 produce at least one of the figures from the associated article, but not necessarily all of them. I therefore cleaned up and refactored the code from my thesis into a smaller number of files, with the idea that different experiments could be performed by chang\u2010 ing a parameter/configuration file, but without needing to change the Hoc or NMODL code itself. The version of the code deposited with ModelDB reproduced Figures 2 and 8 from the article. The goal of this current project was to reproduce the other thirteen data figures. The code onModelDB has no explicit licence, in common with the majority of ModelDB entries. This general lack of licenses does not appear to inhibit researchers in compu\u2010 tational neuroscience from making use of code in ModelDB, nor from publishing new studies based on ModelDB code. Since every model in ModelDB is associated with a published article or book chapter, the reuse of code is acknowledged primarily through academic citations.\n2 Retrieval of the software\nAsnoted above, a version of the source code that reproduced twofigureswas available on ModelDB (it is perhaps impressive that ModelDB still exists, as many neuroinformatics resources funded by the US National Institutes of Health (NIH) \u2018Human Brain Project\u20193 in the 1990s are no longer available online.) This version of the code was not in itself sufficient to reproduce the other thirteen figures. The original source code from my thesis, and from additional simulations requested by reviewers during the article publication process, had been copied between five or six computers in three countries over two continents, and reorganised on several occasions. Two of these computers were sitting in my office, but had not been turned on in many years. Therewas no copy of the code on either ofmy current computers. I had alsomade regular backups of key folders onto CD\u2010R and CD\u2010RW optical disks, and had several\n3Not to be confused with the current EU research project of the same name\nReScience C 6.1 (#14) \u2013 Davison 2020 3\ndozen of these backups to hand. The lifespan of such disks should be at least ten years (100 years or more for CD\u2010R, 25 years or more for CD\u2010RW, according to https://www.clir. org/pubs/reports/pub121/sec4/). Finding a drive able to read them was potentially more of a problem, but one of my machines still has a CD/DVD drive, and after blowing out the dust it was able to read all the 20 or so disks I tried. On these backups, I foundmultiple copies of the code for almost all the figures, although not, for some reason, for Figures 15 and 16 (see below). The source code for all versions of NEURON back to the year 1992 is available from the NEURON website. Gnuplot, used for creating figures, is available as a Debian package. Older versions back to the year 2000 are available on Sourceforge.\n3 Execution\n3.1 Computational environment I do not recall precisely which version(s) of NEURONwas/were used for the simulations shown in the original article. Based on the timing of the work, it was probably NEU\u2010 RON 4.3. I considered trying to install this version on a modern machine, but it seemed simpler to first try the current release of NEURON, since the software has been continu\u2010 ouslymaintained and developed by a stable development team (in particular DrMichael Hines), with a reputation for not breaking backwards compatibility. Similarly, I most probably used Gnuplot version 3.7.1 at the time, but used the most recent version for this reproduction attempt. The simulations for this study were performed on a Dell Precision 7910 workstation, with dual Intel Xeon E5\u20102640 processors (8 cores, 2.6 GHz, 20 MB cache), 128 GB 2400 MHz DDR4 ECC RAM, writing to a 400 GB SSD SAS 12 Gbit/s hard disk. The operating system was Ubuntu 18.04. The software used was: NEURON v7.6.7, compiled with gcc 7.4.0; Python 3.8.1.; Numpy 1.18.1; PyYAML 5.3; Jinja 2.11.1; and Gnuplot 5.2.\n3.2 Code modifications All the NEURON code ran without modification, although I was able to benefit from the support for multithreading, introduced since the original study, to obtain a speedup of 8 times when running with 32 threads (16 cores, presumably using hyperthreading). My memory is that a typical simulation took about six hours on the DECAlphaworkstation I used in 1998\u20102000. The shortest simulations inmy current environment take 11minutes single\u2010threaded and 80 seconds using 32 threads. TheGnuplot scripts required very little modification; at some point the Gnuplot commands were revised for consistency, so for example \u2018set data style lines\u2019 became \u2018set style data lines\u2019.\nMy goal for this reproduction was to fully automate the process of running simulations and generating publication\u2010ready figures, with none of the manual copy\u2010pasting, script editing and command\u2010line data analysis that was necessary originally. To this end, I firstly completed the task of fully parameterizing the Hoc code, so each experiment cor\u2010 responds to a particular set of parameters, but no code changes are needed for different experiments. I secondly wrote a Python script to automate everything. Each data figure in the original article corresponds to a function in this script. Most of the work is still done by NEURON and Gnuplot, but intermediate data formatting and analysis is done in Python. The hand\u2010written Postscript figures have been turned into Jinja templates, which are filled with data coming from the simulations.\nReScience C 6.1 (#14) \u2013 Davison 2020 4\n3.3 Obtaining and running the code All of the code for the reproduction is available at https://github.com/apdavison/ bulbnet-reproduction under an MIT Licence. To reproduce Figure 11, say, on the command line run:\n$ python run.py figure_11\nand similarly for the other figures (2\u20105 and 7\u201017; Figure 1 was an illustration of the net\u2010 work structure, Figure 6 an illustration of a proposed mechanism).\n4 Results\nFor none of the figures were we able to exactly reproduce the originally published ones, due to differences in the sequences of random numbers. However, all figures, with the exception of Figure 13 (Figure 11 in this article) gave qualitatively the same result, and were quantitatively very close. Responses of individual cells, particularly granule cells (Figure 1B) which receive monosynaptic excitation, can be very different from the orig\u2010 inal, as these responses depend strongly on the number of connections a cell receives, and that depends on the random number generator seed. However, measures of pop\u2010 ulation activity, for example the population spike time histogram in Figure 1E, or even individual neuron responses that depend on disynaptic connections, such as the mitral cell inhibitory post\u2010synaptic current (IPSC; Figure 1C), are very well preserved in the re\u2010 production. Figure 1F shows that themitral cell IPSC from the original figure lies within the range of results obtained with different random number generator seeds. While it is disappointing that we couldn\u2019t obtain quantitatively identical results, the ro\u2010 bustness of the scientific conclusions to differences in random number sequences is a very positive property of the model.\n5 Conclusions\nCould another researcher have reproduced the original results? For the two figures that were reproduced by the code deposited at ModelDB, the answer is yes. The code works with the current version of NEURON, and the README contains clear and simple in\u2010 structions. For the other figures, with access to the backups of my working files, the answer is still yes, although with more difficulty, since some \u2018detective\u2019 work is required in matching the names of Hoc files to the corresponding figure. Without these backups, but with theModelDB version, it would still be possible to repro\u2010 duce the results, but it would take several days, probably a couple of weeks. The caption of each of the figures in the original article contains a list of the model parameters that were different from the defaults, and the defaults are given in the Methods section and in a table. However, some parameters are missing from the article, in particular the pa\u2010 rameters of the background input for Figures 15 and 16, and some trial\u2010and\u2010error would be required to recover parameters similar to those used originally. In summary, I regard this as a successful reproduction. In retrospect it would have been better to deposit code for all figures in ModelDB, not just for two of them, at a time when the details of the code were much fresher in mymemory. It would also have been valuable to go through the source code and systematically check that all parameters and input data were described in the published article; most of them were, but some are missing. The choice of using well\u2010maintained, stable, widely\u2010used software was a very good one. NEURON required no code modifications (although code could be added to take advan\u2010\nReScience C 6.1 (#14) \u2013 Davison 2020 5\nReScience C 6.1 (#14) \u2013 Davison 2020 6\nReScience C 6.1 (#14) \u2013 Davison 2020 7\nReScience C 6.1 (#14) \u2013 Davison 2020 8\n25 s -1\n500 ms\nControl\nNo NMDA\nA\nB\nC No AMPA\nreceptors\nreceptors, [Mg 2+ ] = 0 mM\nFigure 9. Reproduction of Figure 11. The effect of removing AMPAorNMDA receptors is repro\u2010 duced."}, {"heading": "No granule-granule cell connections", "text": ""}, {"heading": "Granule-granule cell connections", "text": "0.1\n0.11\n0.12\n0.13\n1 10 100\nP h a s e -l o c k in\ng i n d e x\nRatio of granule:mitral cells\nFigure 11. Reproduction of Figure 13. This is perhaps the only significant failure to repro\u2010 duce. The \u2018U\u2019\u2010shaped response in the origi\u2010 nal figure is missing, and the variability of the responses is lower. Lack of time precluded a more careful examination of the sources of these differences.\nReScience C 6.1 (#14) \u2013 Davison 2020 9\nA 2 s\nB 2 s\nC\n500 ms\nD 500 ms\nE\n125 ms\nFigure 12. Reproduction of Figure 14. The quali\u2010 tative features of the response are reproduced, despite small differences in high\u2010frequency components.\nBefore stimulus\nA\nDuring stimulus\nB\n4\n8\nHz\nC\nD\nFigure 13. Reproduction of Figure 15. Some of the code used for the simulations in the orig\u2010 inal figure could not be found. The level of background input therefore had to be set by trial\u2010and\u2010error. There are clearly differences in the overall activity levels, but the scientific conclusion of the original, that the network structure induces functional lateral inhibition, is unchanged in the reproduction.\nReScience C 6.1 (#14) \u2013 Davison 2020 10\nA1\n1 6417 45\nMitral cell number\nA2\nReScience C 6.1 (#14) \u2013 Davison 2020 11\ntage of multi\u2010threading in the newer versions) and Gnuplot scripts required minimal modification."}], "title": "[Rp] Dendrodendritic inhibition and simulated odor responses in a detailed olfactory bulb network model", "year": 2020}