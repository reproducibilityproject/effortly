{"abstractText": "Is a scientific research paper based on (i) public, online observational data files and (ii) providing free-licensed software for reproducing its results easy to reproduce by the same author a decade later? This paper attempts to reproduce a cosmic topology observational paper published in 2008 and satisfying both criteria (i) and (ii). The reproduction steps are defined formally in a free-licensed git repository package \u201c0807.4260\u201d and qualitatively in the current paper. It was found that the effort in upgrading the Fortran 77 code at the heart of the software, interfaced with a C front end, and originally compiled with g77, in the content of the contemporary gfortran compiler, risked being too great to be justified on any short time scale. In this sense, the results of RBG08 are not as reproducible as they appeared to be, despite both (i) data availability and (ii) free-licensing and public availability of the software. The software and a script to reproduce the steps of this incomplete reproduction are combined in a new git repository named 0807.4260, following the ArXiv identity code of RBG08.1", "authors": [{"affiliations": [], "name": "Boudewijn F. Roukema"}, {"affiliations": [], "name": "Pierre de Buyl"}], "id": "SP:d22094b0ff6bf54ee2b2a7c0c029b70f1a006d2d", "references": [{"authors": ["B.F. Roukema", "Z. Buli\u0144ski", "N.E. Gaudin"], "title": "Poincar\u00e9 dodecahedral space parameter estimates.", "venue": "In: Astronomy & Astrophysics", "year": 2008}, {"authors": ["J. Luminet", "J.R. Weeks", "A. Riazuelo", "R. Lehoucq", "J. Uzan"], "title": "Dodecahedral space topology as an explanation for weak wide-angle temperature correlations in the cosmic microwave background.", "venue": "Nature", "year": 2003}, {"authors": ["A. Allen", "P.J. Teuben", "P.W. Ryan"], "title": "Schroedinger\u2019s Code: A Preliminary Study on Research Source Code Availability and Link Persistence in Astrophysics.", "venue": "The Astrophysical Journal Supplement Series 236.1,", "year": 2018}, {"authors": ["J.P.A. Ioannidis"], "title": "Repeatability of published microarray gene expression analyses.", "venue": "Nature Genetics", "year": 2009}, {"authors": ["A.C. Chang", "P. Li"], "title": "Is Economics Research Replicable? Sixty Published Papers fromThirteen Journals Say \u201cUsually Not\u201d.", "venue": "In: Finance and Economics Discussion Series", "year": 2015}, {"authors": ["V. Stodden", "J. Seiler"], "title": "and Z", "venue": "Ma. \u201cAn empirical analysis of journal policy effectiveness for computational reproducibility.\u201d In: Proceedings of the National Academy of Sciences 115.11 (2018), p.", "year": 2584}, {"authors": ["B.F. Roukema", "T.A. Kazimierczak"], "title": "The size of the Universe according to the Poincare dodecahedral space hypothesis.", "venue": "Astronomy & Astrophysics", "year": 2011}, {"authors": ["G. Hinshaw"], "title": "Five-YearWilkinsonMicrowaveAnisotropy Probe (WMAP) Observations: Data Processing, SkyMaps, and Basic Results.", "venue": "In: Astrophys.J.Supp", "year": 2009}, {"authors": ["R. Liao", "M. Singh"], "title": "GitHub confirms it has blocked developers in Iran, Syria and Crimea", "venue": "Archived at Archive.today.", "year": 2019}, {"authors": ["L. Tung"], "title": "GitHub starts blocking developers in countries facing US trade sanctions", "venue": "Archived at Wayback.", "year": 2019}, {"authors": ["S. Jurdik", "S. Spaniol"], "title": "Iranian customers can\u2019t open Confluence pages", "venue": "Archived at Archive .today.", "year": 2019}, {"authors": ["D. Smith"], "title": "Update on our planned move from Azure to Google Cloud Platform", "venue": "Archived at Wayback.", "year": 2018}, {"authors": ["B.F. Roukema"], "title": "Replacing dark energy by silent virialisation.", "venue": "Astronomy & Astrophysics 610,", "year": 2018}, {"authors": ["B.F. Roukema", "J.J. Ostrowski"], "title": "Does spatial flatness forbid the turnaround epoch of collapsing structures?", "venue": "In:JCAP 2019.12,", "year": 2019}, {"authors": ["M. Akhlaghi", "T. Ichikawa"], "title": "Noise-based Detection and Segmentation of Nebulous Objects.", "venue": "The Astrophysical Journal Supplement Series 220,", "year": 2015}, {"authors": ["M. Akhlaghi", "R. Infante\u2013Sainz", "B.F. Roukema", "D. Valls\u2013Gabaud"], "title": "Baena\u2013Gall\u00e9. \u201cTowards long-term archivable reproducibility.", "venue": "ArXiv e-prints (2020). submitted", "year": 2020}, {"authors": ["GNU. Fortra"], "title": "77 Compiler Characteristics", "venue": "Archived at Wayback.", "year": 2009}, {"authors": ["C. J"], "title": "Burley.Why I\u2019m Stopping My G77 Work. Archived at Wayback", "year": 2001}, {"authors": ["S. Bosscher", "G. Pfeifer", "T. Burnus"], "title": "The other GCC-based Fortran compiler", "venue": "Archived at Wayback.", "year": 2010}, {"authors": ["Riku Nchip"], "title": "GfortranTransition \u2014 Transitioning from g77 to gfortran", "venue": "Archived at Wayback", "year": 2016}], "sections": [{"text": "Edited by Pierre de Buyl ID\nReviewed by Konrad Hinsen ID\nReceived 05 May 2020\nPublished 14 July 2020\nDOI 10.5281/zenodo.3943750\n1 Introduction\nThis paper studies the reproducibility of the main observational results of a cosmic topology researchpaper publishedbymyself and co-authors in 20081. The paper used the surface-of-last-scattering optimal cross-correlationmethod of finding a preferred orientation of the fundamental domain of the spatial section of the Universe, under the working hypothesis that the spatial section is a Poincar\u00e9 dodecahedral space2. The code was developed by me, with comments provided by my coauthors. The results that should be reproduced are those that use themethoddescribed in Section 3.2 of RBG08, and the observational analysis results described in Section 4.2, displayed in Figs. 3, 4, 5 and given numerically in Tables 2 and 3 of RBG08. Related cosmic topology papers by other authors are published with no references to software package details or software licences.\nThe reason for attempting and documenting the reproducibility of this paper is that not only are many papers in astronomy3 and other fields still published without providing the full empirical data sets and source code under free-software licences, but even those that provide free-licensed software and input data may be difficult to reproduce4,5,6. While observational data in cosmology are usually made available online with high-quality documentation, often after an embargo period, free-licensed software in the field of cosmic topology, in particular, library functions for defining\nCopyright \u00a9 2020 B.F. Roukema, released under a Creative Commons Attribution 4.0 International license. Correspondence should be addressed to Boudewijn F. Roukema (boud astro.uni.torun.pl) The authors have declared that no competing interests exist. Code is available at https://codeberg.org/boud/0807.4260. \u2013 SWH swh:1:dir:4f1fe8cf5a01bb4637e31ea938eaa5bc25a2b87b. Data is available at https://lambda.gsfc.nasa.gov/data/map/dr3/dfp/wmap_ilc_5yr_v3.fits. Open peer review is available at https://github.com/ReScience/submissions/issues/41.\nReScience C 6.1 (#11) \u2013 Roukema 2020 1\nmatched circles in the cosmic microwave background or matched discs in extragalactic 3-dimensional comoving space7, is only recorded in the scientific literature in papers published by my research group.\nTo document and help analyse the success and difficulties in reproducing scientific results in this context, the editors of ReScience C posed the \u201cTen Years Reproducibility Challenge\u201d, a request that scientists attempt to reproduce the main results of their own peer-reviewed scientific research papers that had been published before 1 January 2010, and document the method and results in ReScience C8.\n2 Method\nThe first steps for trying to reproduce the original results of RBG08 were to (re-)read the appropriate sections of the paper, initially taking the view of a non-author.\n1. Section 2.11 states that the analysismethod of Section 3.2 requires the three files atURLs listed in footnotes 1, 2, 3 on the samepage. These files represent two versions of an all-sky map of the Universe mostly representing cosmic microwave background emission at 10h\u22121 Gpc (comoving) from the Earth as observed by the Wilkinson Microwave Anisotropy Probe (WMAP)9, and the \u201ckp2\u201d mask to enable analysis that avoids the most contaminated regions of the sky. These files need to be downloaded.\n2. Footnote 71 indicates that CIRCLES-0.3.2.1, to be found at the URL http://cosmo. torun.pl/GPLdownload/dodec/, provides the software for generating the figures and tables. This softwareneeds to downloaded from http://cosmo.torun.pl/GPLdownload/ dodec/circles-0.3.2.1.tar.gz.\nThe next stepwas to develop a script on a GIT repository server that satisfies the requirements of the international scientific community, specifically the International Science Council10, by not blocking access to scientists of any countries or territories. During 2018 and 2019, several of the most popular GIT repository servers partially blocked access to scientists and other residents of several countries and territories (Github11,12,13, Bitbucket14, Gitlab15; the GITLAB software is free-licensed and can be installed independently of the Gitlab online service). The bans have presumably continued into 2020. A shift of my own software to servers acceptable under international scientific ethical standards is underway, but incomplete as of early 2020. I chose a community-based server, Codeberg, not currently listed on the Wikipedia list of source code hosting facilities1. In 2019, the Investigating & Archiving the Scholarly Git Experience project team expressed its concerns about the bans, describing them as having \u201cfar-reaching and chilling consequences for open source, open scholarship, and for the open exchange of information and ideas\u201d16.\nThe remaining planned steps were to implement the minimal number of updates tomake the codework and replicate the original results, usingmodern hardware and a modern software environment. Footnote 7 of RBG08 warns that \u201cThese [CIRCLES0.3.2.1 and CIRCLES-0.3.8] and earlier versions of the software require medium to advanced GNU/LINUX, FORTRAN77 and C experience for a scientific user.\u201d There is no statement regarding the particular compiler(s) used. As far as I recall, it s\u0313 very likely that the widely used GNU fortran compiler of the time, G77, was used together with GCC, as selected automatically by AUTOTOOL packages.\nThe system and hardware chosen for the reproduction project were an AMD computer running with a DEBIAN GNU/LINUX 9.12 system on an X86_64 LINUX-4.9.0 KERNEL. The Fortran compiler chosen was GNU FORTRAN (DEBIAN 6.3.0-18+DEB9U1) 6.3.0 20170516.\n3 Results\nThe overall script intended to carry out the full sequence of downloads, configuring of packages, compiling of packages, subdirectory user-level installation of packages,\n1https://en.wikipedia.org/wiki/Comparison_of_source-code-hosting_facilities\nReScience C 6.1 (#11) \u2013 Roukema 2020 2\nsetting up of calculation parameters, and running the main code, was set up as a BASH script reproduce_RBG08.sh.\nThe full package aiming to reproduce the figures and tables listed above is provided at https://codeberg.org/boud/0807.4260, named after the ArXiv identity of RBG08.\n3.1 Downloading data and software source code\n1. The URL in footnotes 1, 2 and 31 gave clickable links that were split into two and not correctly clickable. The user needs to cut/paste the two halves of each URL in order to obtain the three data files. The data files were downloaded with no apparent problem, with md5sums as indicated in Table 1.\n2. Thefile CIRCLES-0.3.2.1.TAR.GZwith themd5sum indicated inTable 1wasdownloaded. It was included in the main git repository in its original form. Subsequent changes are recorded in the git history at https://codeberg.org/boud/0807. 4260.\n3.2 Compiling/debugging Fixes needed in order to successfully compile CIRCLES include:\n1. A Fortran 77 line that ended on one linewith a+ symbol and started on the next line with another + symbol (within the valid columns for standard Fortran 77) was apparently accepted by the GCC family fortran compiler in 2008, but not now (2020). One of the + symbols was removed.\n2. A fitting algorithm GSL_MULTIFIT_COVAR available in GNU Scientific Library (GSL) versions 1.x was obsoleted; it is no longer present in modern 2.x versions of GSL. With the aim of minimising the interventions required in the system, GSL-1.10 was downloaded and compiled from source, re-creating part of the original software environment.\n3. Using the modern GFORTRAN compiler options -fcheck=bounds -Wall to highlight likely sources of bugs due to insufficiently standard coding led to many warnings. Checking of these warnings motivated many fixes that could be expected to either solve errors in running the main CIRCLES package, or reduce the chance of calculational errors.\n4. The autotools autoreconf command was run in the main CIRCLES-0.3.2.1 directory and its subdirectories.\n5. The COSMDIST package provided by default in a subdirectory of CIRCLES-0.3.2.1 was replaced by a download/configure/compile/install section of the main reproduction script, since COSMDIST is now available in an online git repository. The aim was to reduce the chance of COSMDIST being a blocking factor in reproduction of the calculations.\n6. Memory allocation errors that occur for running CIRCLES without previously definining environment variables for key values such as input filenames are present in CIRCLES-0.3.2.1. These were most likely not noticed in RBG08 because of the use of environment variables providing these values. Fixes to the front-end C file CIRCLES.Cweremadewith the intention of avoidingmemory allocation errors, which are typically reported to the user as segmentation faults. However, memory allocation errors remained, most likely due to Fortran 77\u2013C\nReScience C 6.1 (#11) \u2013 Roukema 2020 3\ninterfacing issues. This is described in the \u00a73.4 on attempted running of the code.\n3.3 Dependencies The full list of dependencies listed \u2013 not necessarily really used \u2013 in the final GFORTRAN compile operation that creates the CIRCLES binary executable is: -lpgplot -lpng lcosmdist -lisolat -lastromisc llapack -lcblas \u2013lf77blas -latlas lgfortran -lquadmath -lcfitsio -lcosmdist -lgsl \u2013lgslcblas -lm -lgcc -lX11 -lm.\n3.4 Running and a software evolution block\nFront end user-friendliness \u2014 At the time of writing the original paper, the aim was that the use of GNU tools to provide a free-licensed package configurable and compilable with ./configure && make and a detailed ./circles --help command would be sufficient to enable easy reproduction by a scientifically competent user. For example, invoking the CIRCLES help option was intended to show both singlehyphen, one-character options and their equivalent double-hyphen, long options, such as -i, --cmb_file_raw=FILE cmb fits file of input data. The freshly compiled version of the code did this correctly, providing the user with a list of available options as expected.\nScripts \u2014My private notes of what were intended to record the most significant steps taken in carrying out the project, along with more minor steps, were used in the attempted reproduction of RBG08. However, in trying to reproduce these steps now, it is clear that the original notes were not as complete and unambiguous as they should be. For the purpose of the current exercise in reproducibility, a completely fresh BASH script was prepared, which verifies the sha512 checksums of input data files and software packages that are downloaded from source rather than provided within the security context of the host system. The style of the new script is partly based on more recent attempts at reproducibility in my own recent papers in which GIT commit hashes of the software17 and a BASH script for running the full software18 were provided. Some inspiration was taken from the MAKE-based reproducibility framework19 recently renamed MANEAGE20, but the structure of the script is much less modular; it is a simple linear script with a few minimal checks.\nThis situation illustrates the problem of \u201cinsider knowledge\u201d being required for the reproducibility of a paper, where \u201cinsider\u201d also includes knowledge that may still be coded in the scientist s\u0313 brain, but not in written form.\nFortran 77\u2013C interfacing \u2014 A more fundamental problem in terms of coding and software environment evolution is that this code uses a C front end and a Fortran 77 backend, configured and compiled together using AUTOCONF tools, in a way that, to the best of my knowledge and that of my co-authors, worked correctly in 2008. The key element for interfacing of Fortran 77 and C code that was recommended at the time was the use of AC_F77_WRAPPERS in the CONFIGURE.AC file21. Three of the modular packages called by the main code \u2013 COSMDIST, ASTROMISC and ISOLAT \u2013 also use AC_F77_WRAPPERS.\nThe main files are circles_f77.f, 2023 lines long, named to emphasise the expected obsolescence of the Fortran 77 language standard; 21 Fortran 77 source files with a total of 11,616 lines of code in lib/; and 3415 lines of Fortran 77 code in the auxiliary package astromisc/lib/. For modernisation of this code, a minimum approachwould be to convert fromFortran 77 to Fortran 2008, in which case Fortran\u2013 C compatibility conventions that are reasonably well developed and implemented by the GCC/GFORTRAN family could be used. Alternatively, F2C, which continues to be available in distributions such as Debian GNU/Linux, could be used to convert the Fortran code into C. Any remaining bugs in the interfacing would be solvable within\nReScience C 6.1 (#11) \u2013 Roukema 2020 4\nthe standard requirements of C, bypassing the issue of interlanguage communication.\nFor the purposes of this reproducibility test, the required re-coding effort would be more than is presently justified. While this is, as far as I know, the only freelicensed code for identified-circles matching for the purposes of cosmic topology analysis for which peer-reviewed research has been published, the techniques developed in codes that are not publicly available under either free or non-free licences have developed considerably since 2008. Moreover, the research field is extremely high risk: an observational confirmationof the spatial topology of theUniversewould be a historically important discovery, but whether or not this measurement is feasible remains highly speculative. To serve as a basis for long-term projects in this particular field, the softwarewould best be rewritten according tomodern standards of C and/or Fortran; and the best tested, accurate, fast, well-coded free-licensed auxiliary libraries, such as CGAL for geometrical purposes, could be used to avoid \u201creinventing the wheel\u201d.\nGiven that a hurried attempt at amajor refactoring of the codewouldnot only tend to extend beyond the scope of the aims of the \u201cTen Years Reproducibility Challenge\u201d, it would also be pointless (a systematic upgrade would better be done properly and thoroughly), this reproducibility attempt was terminated, leaving it with an untraced Fortran\u2013C interfacing memory bug.\n4 Discussion\nCompiler evolution and Fortran/C compatibility are the main elements of the difficulty in reproducing RBG08, together with the presence of some coding that was not sufficiently robust to allow for the interface change. In 2008, G77 was an obvious choice of Fortran compiler in the stable distribution of Debian GNU/Linux. Since the Debian community already had at the time a solid reputation in terms of software security, verification of licensing and fully transparent and participatory decisionmaking, this seemed like awise choice for reproducibility. Using awell-tested, widely used compiler and code standard seemed like a better long-term sustainable choice than using a compiler whose role was still being debated. The main developer of G77 had already announced his intention to stop maintaining the project in 200122, but even by 2010, two years after RBG08 was published, the community remained unclear regarding the relationship between G95, based on GCC, versus GFORTRAN, part of GCC23.\nHowever, also by 2010, GCC already claimed to implement compatibility between Fortran 2003 (ISO/IEC 1539-1:2004(E)) and ISO C99 (ISO/IEC 9899:1999)24, implemented at the coding level by use ISO_C_BINDING and bind(C, ...) declarations and the ability to declare C types in a Fortran module.\nThe IT group at the University of Oxford Department of Physics recommend the modern interfacing methods, and describe the G77 interfacing with C quite colourfully, stating that \u201cPart of the reason for the transition from g77 to gfortran is to make mixing-in with C code simpler, and avoid (most of) the acts of cruel and unusual programmingwhichwere previously required to get the compilers\u02bc outputs to co-operate. Inevitably, the results of said acts were almost inevitably fragile and non-portable.\u201d25\nAn interesting question is whether a reproducibility framework such as MANEAGE20, which aims at a very high standard of reproducibility with maximum modularity and minimal dependencies, would have enabled easy reproducibility of the original project. TheMANEAGE systemwould, in principle, have configured, compiled, and installed all the original software environment, including GSL and G77 and a contemporaneous version of GCC, and would have encouraged the original project to be modular enough with sufficiently many verification tests to survive a decade of evolution of the software environment. A key question would be whether a more modern version of GCC could have compiled the old versions of G77 and GCC. It is quite realistic to expect that a MANEAGE reproduction of RBG08 would succeed more than the BASH script method provided in this project.\nWould this project have been more easily reproducible had it been written in a\nReScience C 6.1 (#11) \u2013 Roukema 2020 5\nhigher level language, such as python? The question did not really arise at the time, since as is stated in the abstract of RBG08, one of the key results was a speed-up in computation time, a critical bottleneck for this type of research, in which case the computational overhead of higher level languages renders them impractical.\nThe aim of the Ten Years\u2019 Reproducibility Challenge is primarily to get \u201cold code to run on modern hardware/software (with minimal modifications)\u201d. Nevertheless, an interesting question would be how much shifting back to an old software environment would be required to run the existing code. This raised a simple practical question: where can we find an official, archived version of the source code of G77 in the version likely to have been used when the paper was calculated and published? This turned out to be non-trivial, because the nature of the relation between G77 and GCC was not sufficiently known by me, nor was it easy to find using search engines. The Debian GNU/Linux developers\u02bc guide to Fortran updating from G77 to GFORTRAN, lasted edited in 2016, states that \u201cg77 and g77-3.4 have been removed from the archive\u201d26. It was only when the main developer of G77, James Craig Burley, kindly responded to a question posed using a social networking feature provided on a git repository server, that the packaging of G77 inside GCC tarballs became known to me. Thus, while finding G77 source code was not as easy as expected, once the detailed information about its relation with GCC was known, finding an archived version on a reputable webserver was found2. However, attempts at compiling G77-3.4.6 within GCC-3.4.6 on Debian GNU/Linux stable (9.12) were unsuccessful.\n5 Conclusion\nIt is ironical that in the field of cosmic topology, not only are most software packages only available privately with unknown licences (as tends to be the case in astronomy as recently as 20153), but the code that is explicitly free-licensed, publicly distributed and having peer-reviewed published results has turned out to be less easy to reproduce than expected. This is, unfortunately, consistent with typical reports on science research paper reproducibility4,5,6. The specific bottleneck suspected of leading to memory errors in this case was that the effort required to update the Fortran 77 files at the heart of the code, interfaced with a C front end, and compiled with the current GFORTRAN compiler from within GCC rather than with the older, discontinued22 G77 compiler, risked being too great to be justified on any short time scale. While Fortran has remained actively used by scientists sincemore than half a century ago and in its modern standards continues to be used actively, and the original CIRCLES package was prepared using the powerful GNU AUTOTOOLS, a robust interface and standards for compiling C and Fortran code together have only evolved quite recently24.\nWhile the results of the paper are not as trivially reproducible as they appeared to be, the requirement of the Ten Years Challenge for the code to be placed in an online git repository, which in this case is https://codeberg.org/boud/0807.4260, resulted in confirmation that the source code is fully free-licensed, including all libraries and other auxiliary software packages, and the input data files remain publicly available online. Refactoring the code into a format such as MANEAGE19,20 would be a potential way forward of shifting the research field towards a more completely open-science phase. Anyone interested in modernising the software and completing the reproduction of the original results is welcome to contact the author of this paper."}, {"heading": "Acknowledgments", "text": "Thank you to Konrad Hinsen (the reviewer) and James Craig Burley for several helpful comments. Part of this research has been supported by the \u201cA next-generation worldwide quantum sensor network with optical atomic clocks\u201d project of the TEAM IV programme of the Foundation for Polish Science co-financed by the European Union under the European Regional Development Fund. Part of this research has been supported by the Polish MNiSW grant\n2https://ftp.gnu.org/gnu/gcc/gcc-3.4.6/\nReScience C 6.1 (#11) \u2013 Roukema 2020 6\nDIR/WK/2018/12. Part of this research has been supported by the Pozna\u0144 Supercomputing and Networking Center (PSNC) computational grant 314."}], "title": "[\u00acRp] Reproducibility of \u2019Poincare\u0301 dodecahedral space parameter estimates\u2019", "year": 2020}