{"abstractText": "I present here the reproduction of the 1996 article entitled \u201cGifa V.4: A complete package for NMR data set processing\u201d [1]. The Gifa project is a career-long effort. It was started in 1987 as a way to gather various codes and ideas I had developed to handle and process NMR datasets in the early days of 2D and 3D NMR1. Since the beginning, Gifa has been built over a careful memory management, a tuned data organisation, and a large set of elementary functions meant to be pipelined. The version 4 published in 1996 was a major improvement over the previously published version (1988) as it brought a complete scripting language, a complete graphic user interface based on the Motif library, and a database management system. This program was not open-source at that time, but nevertheless profited from a large number of users, and some are still using it nowadays, despite the difficulty to maintain it. This was an additional motivation to try to renew this program and to make it freely available on a code forge.", "authors": [{"affiliations": [], "name": "Marc-Andr\u00e9 Delsuc"}, {"affiliations": [], "name": "Pierre de Buyl"}], "id": "SP:593b4265ca07e86bf47038603f1451f20b96bb99", "references": [{"authors": ["J.-L. Pons", "T.E. Malliavin", "M.-A. Delsuc"], "title": "Gifa V. 4: A complete package for NMR data set processing.", "venue": "Journal of Biomolecular NMR", "year": 1996}, {"authors": ["D. Tramesel", "V. Catherinot", "M.-A. Delsuc"], "title": "Modeling of NMR processing, toward efficient unattended processing of NMR experiments.", "venue": "Journal of Magnetic Resonance", "year": 2007}, {"authors": ["L. Chiron", "M.-A. Coutouly", "J.-P. Starck", "C. Rolando", "M.-A. Delsuc"], "title": "SPIKE a Processing Software dedicated to Fourier Spectroscopies.", "year": 2016}, {"authors": ["W. Press", "S. Teukolsky", "W. Vetterling", "B. Flannery"], "title": "Numerical recipes in Fortran 77", "year": 1996}, {"authors": ["L. Margueritte", "P. Markov", "L. Chiron", "J.-P. Starck", "C. Vonthron-S\u00e9n\u00e9cheau", "M. Bourjot", "M.-A"], "title": "Delsuc. \u201cAutomatic differential analysis of NMR experiments in complex samples.", "venue": "Magnetic Resonance in Chemistry", "year": 2018}], "sections": [{"text": "R E S C I E N C E C Reproduction / Analytical Chemistry\n[Rp] Gifa V.4: A complete package for NMR data set processing\nMarc-Andr\u00e9 Delsuc1,2, ID 1Institut de G\u00e9n\u00e9tique Biologie Mol\u00e9culaire et Cellulaire - UMR 7104 - Inserm U 1258, Illkirch, France \u2013 2CASC4DE, SAS, Illkirch, France\nEdited by Pierre de Buyl ID\nReviewed by Konrad Hinsen ID\nReceived 30 April 2020\nPublished 23 June 2020\nDOI 10.5281/zenodo.3904595\n1 Introduction\nI present here the reproduction of the 1996 article entitled \u201cGifa V.4: A complete package for NMR data set processing\u201d [1]. The Gifa project is a career-long effort. It was started in 1987 as a way to gather various codes and ideas I had developed to handle and process NMR datasets in the early days of 2D and 3D NMR1. Since the beginning, Gifa has been built over a careful memory management, a tuned data organisation, and a large set of elementary functions meant to be pipelined. The version 4 published in 1996 was a major improvement over the previously published version (1988) as it brought a complete scripting language, a complete graphic user interface based on the Motif library, and a database management system. This program was not open-source at that time, but nevertheless profited from a large number of users, and some are still using it nowadays, despite the difficulty to maintain it. This was an additional motivation to try to renew this program and to make it freely available on a code forge.\n2 Historical context\nWhen I entered the ten years challenge, I first thought of reproducing a later avatar of the same project, a 2007 program implementation called at that time NPK [2]. The NPK version was an effort to move away from the monolithic environment of Gifawhich was nearly impossible to port to MacOs or Windows. This had lead us to move the graphic from X/Motif to Java/Swing and the scripting language to python 2.1 (thanks to the excellent jython package recently released then). However the mathematical core was unchanged and still written in FORTRAN77 with strong 32 bit limitations. Because of these limitations, NPK was abandoned, and a much extended program has been developed in python since then [3]. After more consideration, I realized that reproducing a program written as a mix of FORTRAN77 , Java, and Python 2.1 was not worth the effort, in particular considering\n1I started doing NMR as early as 1979, for my French DEA project. 2D NMR was in its infancy (the initial paper from R.Ernst group is dated 1976). NMR spectrometers, computers, and programs were badly prepared for this new approach, where complex pulse sequences had to be prepared and launched in automation, generated large datasets, which had to be transformed, visualized and quantified while not fitting in the 64kB central memory, and even barely on the removable 14 inch disk pack that stored 2.5MB of data !\nCopyright \u00a9 2020 M.-A. Delsuc, released under a Creative Commons Attribution 4.0 International license. Correspondence should be addressed to Marc-Andr\u00e9 Delsuc (madelsuc@unistra.fr) The authors have declared that no competing interests exist. Code is available at https://github.com/delsuc/Gifa. \u2013 SWH swh:1:dir:57cb6f31528c596cc67ce46e142f3de8cb082bcb. Open peer review is available at https://github.com/ReScience/submissions/issues/33.\nReScience C 6.1 (#9) \u2013 Delsuc 2020 1\nmy poor knowledge of Java and the fact that nobody was using this program any more. This is why I decided to fall back on the 1996 version of the same project. Gifa was started in the eighties, when the first 32 bit architectures (Vax/VMS) were coexisting with older 16 bit ones (PDP-11). It was also a time were 64MB of memory was plenty, and the challenge was to fit the 2D NMR datasets in memory, in contrast with other programs at that time which were doing lengthy processes by swapping the data on disk. Gifa is thus based on a carefully carved memory organisation, built on many FORTRAN77 COMMON and EQUIVALENCE structures, which allowed to use part of the memory for certain actions, but also to use the whole memory when needed. Due to FORTRAN77 limitations, this allocation is purely static, and set at compile time - for this reason, several version of Gifa were distributed, ranging from a very small buffer (total 1MB), to the largest one (256MB). Gifa is a data analysis programmeant for NMR. In its 1996 avatar, it presents a complete set of fundamental mathematical operations (Fourier transforms, data-set arithmetic, model fitting, \u2026) and some advanced tools (Linear Prediction tools, Maximum Entropy optimisation, DOSY processing by Inverse Laplace transform\u2026). It is able to process 1D, 2D and in a less optimized manner 3D data-sets. It comes with a complete scripting language with variable scoping, (limited) recursion, arrays, dictionaries, file I/O, and some database capabilities. This macro language, complemented with a set of graphic primitives is used to build a complete dynamic GUI, which covers basic and advanced operations, an NMR assignment tool, and an NMR relaxation module. As mentioned above, the memory model is static and monolithic in order to allow an optimal use of the resources. This organisation insures little dependencies with respect to external tools, and a good control of the development.\n3 Retrieval of the software\nThe source files of the historical Gifawas still stored somehow onmy current hard drive and has been through two laboratory relocations (from Montpellier to Lyon and then to Strasbourg), many computer upgrades (with migration of the accounts), and one OS change (from MacOsX to Linux Ubuntu). No version control system was used at that time, however I could find several versions of the source in tar archives from version 4.31 dated Aug 2000, to version 4.5 dated Mars 2004. In the absence of the article version dated 1996, I decided to use these versions, and moved them to github.com as successive commits. The code is about 54 000 lines of FORTRAN77, 18 000 lines of C and 27 000 lines of the macro language. The second step is to remember the file organisation and how to build the program. As the program was not open-source, this was not described in the official documentation. A central make program controls the building process - the Makefile contains some documentation, and guided me in the process.\n3.1 Steps by steps All the development work was performed in a virtual machine running Ubuntu 16.04 32 bit with 4GB ofmemory hosted by aMacBookPro with a Intel Core i5-7360U processor at 2.30GHz, running Ubuntu 19.10. At the beginning of this project, I had three main concerns: i) the 32 bit organisation of the program; ii) themaintainability of the production pipeline; and iii) external libraries, in particular the X/Motif library used for display.\nA 32 bit program \u2014 As a consequence of the memorymanagement, the 32 bit organisation is intrinsic to the program. Not sure on how to handle this, I decided to work in a Virtual Machine (VM) based on the last Ubuntu version which proposes a 32 bit version: 16.04\nReScience C 6.1 (#9) \u2013 Delsuc 2020 2\nLTS. Despite this environment being more than 20 years posterior to the one in which Gifa was developed, everything was built without any particular problems.\nThe production pipeline \u2014 Thanks to the already long development history, the program had been ported to VMS and many Unix flavours (Linux, SunOs, HP-UX, IRIX, IRIX64, AIX). Thiswas possible through theuse of a home-built productionpipeline able to adapt the variations of each architecture, using a mixture of make and perl scripts and the f2c FORTRAN77 to C translator [4]. Fortran source code first goes through a home-made Fortran code preprocessor that permits to include files, conditional code, and allows to tune and adapt the produced code. Fortran code is then translated to C by f2c and finally compiled with gcc. This scheme simplifies the choice of the FORTRAN77 compiler and allows additional features, such as recursivity (not allowed in FORTRAN77 ) and simple link with C code. This set-up, which was optimized to ease the porting to a new architecture, has helped a lot in the reproduction work. Only a few small modifications was needed to adapt the code to a recent version of Linux, running in a Virtual environment, as the basic languages (make, perl, and C) on which everything is based have not significantly changed.\nExternal libraries \u2014 The program uses very few external libraries apart for the X/Motif graphic user interface, and the ndbm database engine. Most mathematical algorithms (Fourier transform, Brent or Levenberg-Marquardt optimisers, \u2026) are natively coded, inspired from the excellent Numerical Recipes book [5]. Linear algebra operations, use the LINPACK [6] routines, which sources were integrated in the code itself. Basic vector operations are constructed from a home-made library ( vect.for ) implementing 60+ basic operations, in an atomic manner, easy to optimize for the compiler. The X/Motif library had been a major hurdle during the Gifa early development in particular while porting to the various available versions, and I was fearing it would still be a problem. It turned out to be extremely simple, just an installation from the repository."}, {"heading": "Actual changes \u2014", "text": "libraries: I had to install X/Modif from the repository (libmotif-dev,libxext-dev) and readline from libreadline6-dev. The ndbm database engine is not available for the distribution 16.04, but the GNU Project proposes gdbm which has a ndbm compatibility mode, activated with a flag at link time: -lgdbm_compat.\nLinux and environment: A few constructs were obsolete or not adapted to a modern system and had to be adapted.\n\u2022 At that time, perl was in version 4 (perl 5 was released in 1994 and not widely adopted then). Ubuntu 16.04 uses perl 5.22 and a few simple syntactic changes were needed to have a working pipeline.\n\u2022 the timing code was using the CLK_TCK macro which seems to be obsolete, this was modified to use sysconf (_SC_CLK_TCK);\n\u2022 temporary files were created on /usr/tmp. I had to make a link to /tmp to solve this problem with no modification in the code;\n\u2022 I struggled a bit with the linker step - the simpler appeared to be the better !\n\u2022 The HTML documentation is created with a perl script, HTML comments were using the syntax \u201d<!-- comments >\u201d which is not understood any-more and had to be changed to \u201d<!-- comments -->\u201d\n\u2022 HTML display was using Netscape\u2122 or Mozilla\u2122, this was changed to Firefox\u2122.\nReScience C 6.1 (#9) \u2013 Delsuc 2020 3\nlicensing: At the time of the publication, the program was not open-source, and had to be activated with a licence key distributed upon request. A C code was checking the validity of the key at launch time, this code has been deactivated, and a CeCILL 2.1 license [7] was associated to the code. All the modifications are reflected as commits in the repository.\n4 Reproduction\nAfter performing the modifications above, the program runs directly with no particular problem, and the internal test suit is validated with no error. The display system is up and the graphic User Interface is correctly functioning. Figures 1 and 2a in the original study, which present the macro language are not reproduced here. Listing 1 reproduces Figure 2b, and Figures 1 and 2 reproduce Figures 2c and 3 from the original study. The data-set which is shown in the original work could not be recovered. In consequence, I chose to present a TOCSY spectrum of Artemisine, obtained at 700MHz in a recent study [8]\n; t h i s t e x t reproduces Figure 2a from the o r i g i na l paper\n; This macro crea tes a form box which permits to modify the ; parameters of the contour\u2212mode disp lay window . ; The user can \u2212 open / c lose the contour\u2212mode disp lay window ; \u2212 choose to d i sp lay po s i t i v e / negat ive / both s ides ; \u2212 change the number and spacing of contour l e v e l s . ; Prese t parameters : i f ( $CDISP2D==1) then ; $cdisp2d descr ibes graphic s t a t e s . se t cdef = on e l se se t cdef = o f f endif i f ( $SIGN==1) then ; Describes which l e v e l s are displayed se t pndef = po s i t i v e ; ( pos i t i ve , negative , both ) e l s i f ( $SIGN == 0 ) then se t pndef = both e l se se t pndef = negat ive endif ; Build the form formbox \u201d Display contro l \u201d \\\n\u201d d i spcont_doi t $cont $posneg $ lev $log \u201d \\ ; Callback \u201d Contour Display ( cdisp2d ) \u201d \\ enum \u201don , o f f \u201d cont $cdef \\ ; Define f i e l d s \u201d Display mode ( s ign ) \u201d \\ enum \u201d pos i t i ve , negative , both \u201d posneg $pndef \\ \u201dNumber of l e v e l s ( l e v e l ) \u201d i n t l ev $LEVEL \\ \u201d Level Algo : ( loga ) \u201d rea l log $LOGA \\ \u201d ( x=1 : equ id i s t an t ; x> l : by power of x ) \u201d message \\ * ; * i s end of l i s t\nex i t\nListing 1. Text of the macro dispcont, which builds the display control form box.\nSlight differences can be observed between the original figures and the current ones. Most of the differences come to simple improvements in the program after the initial release, for instance the button \u02bbCancel\u02bc changed to \u02bbClose ,\u0313 or the reorganisation, and extension of the user menus. The benchmark programs proposed in the original publication were run, the results are shown in Table 1.\nReScience C 6.1 (#9) \u2013 Delsuc 2020 4\nReScience C 6.1 (#9) \u2013 Delsuc 2020 5\nAt this stage, the reproduction is considered as successful, even though a complete check of all functionalities has not been fully performed.\n5 Conclusion\nTheGifaprogramwas successfully reproduced, in a relatively easymanner for a software of this size, developed about 25 years ago. The version of the code originally published was lost, but a later version of the program was used and fully reproduced on a recent computer. The reproduction was performed in a simple Virtual Machine, running the 32 bit version of Ubuntu 16.04, which should be supported until April 2024. The ease of porting is mostly coming from the use of standard tools and programming languages, still well supported today (f2c, perl, make, gzip, tar, \u2026). The program is one large code with very little external dependencies, as it internally contains all mathematical routines, an internal macro language, and its own GUI system. The only external libraries which had to be installed are the X/Motif graphic and ndbm, a flat database engine. While the X/Motif library could be installed and linked with no modification, ndbm was not available. By chance gdbm, the GNU simple database engine, has a compatibility mode for ndbmwhich could be readily used. Also, the diversity of the Unix environments in the nineties, imposed the development of a robust production pipeline easy to modify and to tune, which has been a valuable tool in this reproduction. The needed corrections have mostly consisted in finding and installing the correct software packets or libraries. Some tools and some structures had to be modified because of obsolete constructs (Netscape\u2122 or HTML comments for instance!). Reviving the Gifa program was an interesting experience, it reminded me the qualities - and flaws - of this program, and let me appreciate the efficiency of a monolithic program, with a tight memory management and an algorithmics optimized to the limited resources available 20 years ago. Despite its limitations, such a program can still have many applications today, for instance embedded in a larger environment. This work also showed that a monolithic program, written with simple standard tools, with little dependencies on the environment, is quite easy to maintained and can see its life extended beyond 20 years."}], "title": "[Rp] Gifa V.4: A complete package for NMR data set processing", "year": 2020}