{"abstractText": "Computational context \u2014 The research was done for a wetlands project [1], which 25 years later became the baseline for a project on changes in wetland status [2]. The project was managed by the Freshwater Research Unit (FRU), at that time a component of the University of Cape Town Zoology Department. In the 1980s, most serious computer work, especially statistics, was still done on a centralisedmainframeusing expensive packages such as BMDP and SPSS. Somewhere between 1986 and 1989 the FRU acquired a shared personal computer running Microsoft DOS, probably an AT with 1 Mb RAM and a 40 Mb hard drive, procured using external project funding, which budget records suggest cost about ZAR 15000 (similar to the prevailing value of a doctoral grant for one year). The IT equipment included an A3 dot-matrix graphics printer with a broad four-colour ribbon. Several staff members and students used the equipment under an analogue time-sharing system consisting of a paper calendar (see Appendix, Figure 3). Although I was familiar with mainframe Fortran 77 and IGL6 for graphics, Turbo Pascal seemed to me to be a more affordable PC compiler, with built-in graphics capability. A Turbo Pascal version 5 compiler cost ZAR 441.38, according to the hardcopy records in the project laboratory notebook (see Appendix, Figure 4). The relational database was stored using PC-File, a Buttonware package based on the dBase format, and exported to a fixed-width text file for use by the Pascal Maucha program. To put the prices in context, a personal computer in 1986, with a staff discount, cost about ZAR 1800 (Bondwell IBM-PC AT clone with a Hercules graphics card and 20 Mb hard drive). Prof JennyDay of the FRUadvised thewetland team to useMaucha ionic diagrams [3], [4] for summarising the ratio of major cations and anions in water samples. She later used the software described here in a more extensive study of the dominance of major ions in South African rivers [5]. Constructing the diagrams, which were first used for visually classifying lake waters in Europe during the 1930s, is quite tedious, so preparing them with a computer program was a more cost-effective proposition. Reproducibility and re-usability of code were not uppermost in my mind at that time I needed to get the results out for project reports to the funding agency, and for publications. The original source code was never formally published, and funding for wetland", "authors": [{"affiliations": [], "name": "Michael Silberbauer"}, {"affiliations": [], "name": "Nicolas P. Rougier"}], "id": "SP:a78a0ab56bda8a286054e74a35d86bea3806c02b", "references": [{"authors": ["M.J. Silberbauer", "J.M. King"], "title": "Geographical Trends in theWater Chemistry ofWetlands in the South-Western Cape Province, South Africa.", "venue": "Southern African Journal of Aquatic Sciences", "year": 1991}, {"authors": ["H. Malan", "J. Day", "C.-L. Ramjukadh", "N. Olivier"], "title": "Trajectories of change in wetlands of the Fynbos Biome from the late", "venue": "Tech. rep. 2183/1/14", "year": 1980}, {"authors": ["R. Maucha"], "title": "HydrochemischeMethoden in der Limnologie XII.", "venue": "Die BinnengewA\u0303\u00a4sser. Ed. by A. Thienemann. Stuttgart: Schweizerbart,", "year": 1932}, {"authors": ["E.S. Broch", "W. Yake"], "title": "A modification of Maucha\u2019s ionic diagram to include ionic concentrations.", "venue": "Limnology and Oceanography", "year": 1969}, {"authors": ["J.A. Day", "J.M. King"], "title": "Geographical patterns, and their origins, in the dominance of major ions in South African rivers.", "venue": "South African Journal of Science", "year": 1995}, {"authors": ["A. Bartel"], "title": "DOSBox. June 2019", "venue": "URL: https://www.dosbox.com/ (visited on 02/11/2020)", "year": 2020}, {"authors": ["M. Silberbauer"], "title": "Internet-based applications for interrogating 50 years of data from the South African national water quality monitoring network.", "venue": "(Apr", "year": 2020}], "sections": [{"text": "R E S C I E N C E C Reproduction / Aquatic Science"}, {"heading": "Re ReScience challenge: Geographical Trends in the", "text": "Water Chemistry of Wetlands in the South-Western Cape"}, {"heading": "Province, South Africas", "text": "Michael Silberbauer1, ID 1Retired since 2020-01-31: formerly Resource Quality Information Services, Pretoria, South Africa\nEdited by Olivia Guest ID\nReviewed by Nicolas P. Rougier ID\nReceived 31 March 2020\nPublished 22 August 2020\nDOI 10.5281/zenodo.3996198"}, {"heading": "Historical context", "text": "Scientific question \u2014 Does the major-ion water chemistry in wetlands in theWestern Cape Province show geographical patterns?\nComputational context \u2014 The research was done for a wetlands project [1], which 25 years later became the baseline for a project on changes in wetland status [2]. The project was managed by the Freshwater Research Unit (FRU), at that time a component of the University of Cape Town Zoology Department. In the 1980s, most serious computer work, especially statistics, was still done on a centralisedmainframeusing expensive packages such as BMDP and SPSS. Somewhere between 1986 and 1989 the FRU acquired a shared personal computer running Microsoft DOS, probably an AT with 1 Mb RAM and a 40 Mb hard drive, procured using external project funding, which budget records suggest cost about ZAR 15000 (similar to the prevailing value of a doctoral grant for one year). The IT equipment included an A3 dot-matrix graphics printer with a broad four-colour ribbon. Several staff members and students used the equipment under an analogue time-sharing system consisting of a paper calendar (see Appendix, Figure 3). Although I was familiar with mainframe Fortran 77 and IGL6 for graphics, Turbo Pascal seemed to me to be a more affordable PC compiler, with built-in graphics capability. A Turbo Pascal version 5 compiler cost ZAR 441.38, according to the hardcopy records in the project laboratory notebook (see Appendix, Figure 4). The relational database was stored using PC-File, a Buttonware package based on the dBase format, and exported to a fixed-width text file for use by the Pascal Maucha program. To put the prices in context, a personal computer in 1986, with a staff discount, cost about ZAR 1800 (Bondwell IBM-PC AT clone with a Hercules graphics card and 20 Mb hard drive). Prof JennyDay of the FRUadvised thewetland team to useMaucha ionic diagrams [3], [4] for summarising the ratio of major cations and anions in water samples. She later used the software described here in a more extensive study of the dominance of major ions in South African rivers [5]. Constructing the diagrams, which were first used for visually classifying lake waters in Europe during the 1930s, is quite tedious, so preparing them with a computer program was a more cost-effective proposition. Reproducibility and re-usability of code were not uppermost in my mind at that time I needed to get the results out for project reports to the funding agency, and for publications. The original source code was never formally published, and funding for wetland\nCopyright \u00a9 2020 M. Silberbauer, released under a Creative Commons Attribution 4.0 International license. Correspondence should be addressed to Michael Silberbauer (Michael.Silberbauer@gmail.com) The authors have declared that no competing interests exist. Data is available at http://www.riv.co.za/wv/data/CHEMDATA.DAT. Open peer review is available at https://github.com/ReScience/submissions/issues/25.\nReScience C 6.1 (#13) \u2013 Silberbauer 2020 1\nresearch dried up at the end of 1989. I moved to a government remote sensing group with a VAX, running Fortran and C. Soon afterwards, the group adopted Esri s Arc/Info as a graphics development platform on Sun Unix workstations, using the Arc Macro Language for programming. I could now code the symbols and mapping in a single program, and subsequent development followed a path of serial obsolescence: AML ? ArcView Avenue ? ArcGIS VBA. In 2010 I discovered that R could produce publishable maps of water quality distribution without the need for a licence server. The Maucha code now exists as a function in R.\nRetrieval of software \u2014 The Pascal codewas in thewetlands project directory in a forgotten corner of my computer s hard drive - I copy everything over to the new drive when I upgrade my computer every few years. A copy of the code is available in the Appendix and in the Software Heritage Archive."}, {"heading": "Dependencies", "text": "The software has two dependencies, namely the Turbo Pascal compiler and a fixedformat ASCII file, CHEMDATA.DAT, containing the data. Both were still available in the project directory."}, {"heading": "Execution", "text": "Running 1980s software on a 2020s computer requires a virtual DOS environment. Fortunately, since the 1980s the Internet has happened, so I was able to find excellent instructions for running Turbo Pascal in DOSBox [6], [7].\n\u2022 Hardware: Hewlett-Packard AMD Ryzen 7 PC\n\u2022 Operating system: Windows 10 version 1903\n\u2022 Turbo Pascal: version 5\nNo modification to the Pascal program was required. The directory in which the program was located needed to be copied into a special DOSBox directory on the desktop. The original instructions consisted of a few comment lines in the code. The results obtained in the DOSBox virtual environment on aWindows 10 PC were similar to those in a 35mm slide presentation that I rediscovered in January 2020 1 (Figure 1). However, for the original publication, the process of preparing a figure would have comprised screen capture of the image, printing on paper and applying messy 20th century analogue technology involving scissors and glue (Figure 2)."}, {"heading": "Conclusion", "text": "I would not advise anyone to use the original Turbo Pascal software. A recent R script [8] or the Excel spreadsheet version2 would be easier to get going on a 21st century computer. The competence that another researcher would need is knowledge of simple trigonometry and water chemistry. The original diagrams by Maucha in 1932 were drafted using paper and pencil, so in theory no programming skills are needed. In practice, constructing dozens of Maucha diagrams by hand, cutting them out and sticking them on a map, while initially therapeutic, could become impractical. On the occasion ofmy retirement\n1https://photos.app.goo.gl/qqK6xKF46adjZDB37 2http://www.riv.co.za/wv/Scripts.html\nReScience C 6.1 (#13) \u2013 Silberbauer 2020 2\nin January 2020, a colleague kindly proved that the diagrams could also be produced in cake form (Figure 5). I regrettably cannot provide the code or recipe. With regard to archiving software, this piece of code only survived in its original state because it was part of a project directory on my computer. More formal version control and archiving is recommended for important software."}, {"heading": "Appendix", "text": "Source code \u2014Note that the constants hardcoded in procedure Equilivate are atomic or molecular weights of each ion.\nprogram MauchSpg; { Maucha R (1932) Hydrochemische Metoden in der Limnologie.\nBinnengewasser 12, 173p.\nBroch E S & Yake W (1969) A modification of Maucha\u2019s ionic diagram to include ionic concentrations. Limnology & Oceanography 14 p\n933-935 } { M J Silberbauer, Zoology University of Cape Town, September 1989 } { Modified to write to an Arc/Info Ungenerate file - MJS October 1992 }\n{$R+} { check ranges } Uses Graph; var\nChemFile : Text; SpgFile : Text; ChemValid : boolean; Acidity : boolean; SpgName : string [64]; VleiCode : string [10]; TextItem : string [20]; Pad : string [1]; X : real; Y : real; XAspect : word; YAspect : word; Aspect : real; TotalArea : real; IonArea : real; TotalRadius: real; IonRadius : real; XCentre : integer; YCentre : integer; SeedX : integer; SeedY : integer; XScreen : integer; YScreen : integer; I : integer; Angle : integer; Scale : integer; StartAngle : real; IonAngle : real; EndAngle : real; Equivalents: real; EquivSum : real; Vertex : array[1..5,1..2] of integer; ChemInput : array[1..9] of real; Gd, Gm : integer; Temperature, Salinity, Conductivity, pH , TDS, TSS : real; CO3 , HCO3 , H2CO3 , Ca , Mg , Na : real; K , Cl , S , SO4, PO4 : real; SiO4 , TP , KN , NO3, NO2, NH4 : real; Polyphenol , WaterColour : real; Latitude : real;\nReScience C 6.1 (#13) \u2013 Silberbauer 2020 5\nLongitude : real;\nfunction r (Degree : real) : real; begin\nr := Degree * Pi / 180; end;\nfunction ScaleX (XValue : real) : integer; { scales x values } begin\nXValue := XValue + (GetMaxX div 2); ScaleX := Round (XValue);\nend;\nfunction ScaleY (YValue : real) : integer; { scales y values } begin\nYValue := YValue * Aspect; YValue := YValue + (GetMaxY div 2); ScaleY := Round (YValue);\nend;\nprocedure Equilivate; { Converts mg/litre to meq/litre } begin\nChemInput[06] := CO3*2 / 50; { \u201dmg/l\u201d originally obtained by multiplying} ChemInput[05] := HCO3 / 50; { meq/l by 50 (\u00ab mol. wt. of CaCO3) } ChemInput[09] := H2CO3 / 50; ChemInput[01] := Ca*2 / 40.08; ChemInput[02] := Mg*2 / 24.31; ChemInput[08] := Na / 22.99; ChemInput[07] := K / 39.10; ChemInput[04] := Cl / 35.45; ChemInput[03] := S*2 / 32.07;\nend;\nbegin Assign (ChemFile, \u2019c:\\data\\vlei\\CHEMDATA.DAT\u2019); Reset (ChemFile); Gd := Detect; InitGraph (Gd, Gm, \u2019\u2019); if GraphResult <> grOK then Halt(1); SetTextStyle (TriplexFont, HorizDir, 1); SetTextJustify (LeftText, TopText); GetAspectRatio (XAspect, YAspect); Aspect := (XAspect / YAspect) * 0.9;\nRepeat For I := 1 to 9 do begin\nChemInput[I] := -1; end; ReadLn (ChemFile, Latitude, Longitude, Latitude, Longitude,\nTemperature, Salinity, Conductivity, pH, TDS, TSS, CO3, HCO3, H2CO3, PO4, SiO4, TP, KN, NO3, NO2, NH4, Ca, Mg, Na, K, Cl, S, Polyphenol, WaterColour, Pad, Pad, VleiCode);\nEquilivate;\nReScience C 6.1 (#13) \u2013 Silberbauer 2020 6\nChemValid := true; EquivSum := 0; For I := 1 to 9 do begin\nIf (ChemInput[I] < 0) then ChemValid := false; EquivSum := EquivSum + ChemInput[I];\nend;\nAcidity := false; { check for special case of acidity } if (H2CO3 > 0.01) then begin\nAcidity := true; ChemInput[05] := ChemInput[09]; { make bicarb represent acid..\n} end;\nIf (ChemValid) and (EquivSum > 0) then begin\nSpgName := Concat (\u2019C:\\DATA\\VLEI\\\u2019, VleiCode); WriteLn (\u2019Opening \u2019, SpgName); Assign (SpgFile, SpgName); Rewrite (SpgFile);\nXCentre := 0; YCentre := 0; TotalArea := 4000 * Ln (EquivSum+1); TotalRadius := Sqrt (0.125 * TotalArea / Sin(r(22.5))); SetFillStyle (EmptyFill, 0); Ellipse (ScaleX (XCentre), ScaleY (YCentre), 0, 360,\nRound(TotalRadius), Round(TotalRadius * Aspect));\nFillEllipse (ScaleX (XCentre), ScaleY (YCentre), Round(TotalRadius), Round(TotalRadius * Aspect));\nfor Angle := 0 to 7 do begin\nEquivalents := ChemInput [Angle + 1]; IonArea := (Equivalents / EquivSum) * TotalArea; IonRadius := IonArea / (TotalRadius * Sin(r(22.5))); StartAngle := Angle * 45; IonAngle := StartAngle + 22.5; EndAngle := (Angle + 1) * 45; Vertex[1,1] := ScaleX (XCentre); Vertex[1,2] := ScaleY (YCentre); Vertex[2,1] := ScaleX (TotalRadius * Cos(r(StartAngle))); Vertex[2,2] := ScaleY (TotalRadius * Sin(r(StartAngle))); Vertex[3,1] := ScaleX (IonRadius * Cos(r(IonAngle ))); Vertex[3,2] := ScaleY (IonRadius * Sin(r(IonAngle ))); Vertex[4,1] := ScaleX (TotalRadius * Cos(r(EndAngle ))); Vertex[4,2] := ScaleY (TotalRadius * Sin(r(EndAngle ))); Vertex[5,1] := ScaleX (XCentre); Vertex[5,2] := ScaleY (YCentre); SeedX := ScaleX (IonRadius/2.0 * Cos(r(IonAngle ))); SeedY := ScaleY (IonRadius/2.0 * Sin(r(IonAngle ))); SetFillStyle (SolidFill, Angle+2); FillPoly (5, Vertex); SetColor (0); SetLineStyle (SolidLn, 0, ThickWidth);\nReScience C 6.1 (#13) \u2013 Silberbauer 2020 7\n{ Write to the Arc/Info Ungenerate file }\nWriteLn (SpgFile, Angle + 1, \u2019,\u2019, SeedX, \u2019,\u2019, SeedY); WriteLn (SpgFile, Vertex[1,1], \u2019,\u2019, Vertex[1,2]); WriteLn (SpgFile, Vertex[2,1], \u2019,\u2019, Vertex[2,2]); WriteLn (SpgFile, Vertex[3,1], \u2019,\u2019, Vertex[3,2]); WriteLn (SpgFile, Vertex[4,1], \u2019,\u2019, Vertex[4,2]); WriteLn (SpgFile, Vertex[5,1], \u2019,\u2019, Vertex[5,2]); WriteLn (SpgFile, \u2019END\u2019); Line (Vertex[1,1], Vertex[1,2], Vertex[2,1], Vertex[2,2]); Line (Vertex[4,1], Vertex[4,2], Vertex[5,1], Vertex[5,2]); SetLineStyle (SolidLn, 0, NormWidth); SetColor (Angle+2);\nend; WriteLn (SpgFile, \u2019END\u2019); Close (SpgFile); X := TotalRadius * Sin(r(292.5)); Y := TotalRadius * Cos(r(292.5)); SetUserCharSize (2, 4, 2, 5); SetTextJustify (RightText, BottomText); Str (Round(TDS), TextItem); OutTextXY (GetMaxX-10, GetMaxY-10, \u2019TDS = \u2019 + TextItem + \u2019 mg/\nl\u2019); SetTextJustify (LeftText, BottomText); If (Acidity) then OutTextXY (20, GetMaxY-10, \u2019Acid\u2019); SetUserCharSize (3, 1, 3, 2); SetTextJustify (LeftText, TopText); OutTextXY (10,10,VleiCode); ReadLn; ClearDevice;\nend; until Eof (ChemFile); Close (ChemFile); SetUserCharSize (4, 3, 3, 3); EquivSum := 1; XCentre := 150; YCentre := 0; OutTextXY (XCentre + 40, YCentre, \u2019[Equivalents]\u2019); SetTextJustify (LeftText, CenterText); for I := 1 to 5 do begin\nYCentre := YCentre + 50; TotalArea := 4000 * Ln (EquivSum+1); TotalRadius := Sqrt (0.125 * TotalArea / Sin(r(22.5))); Str (EquivSum:7:0, TextItem); OutTextXY (XCentre + Round(TotalRadius) + 10, YCentre, TextItem); SetFillStyle (EmptyFill, 0); Ellipse (XCentre, YCentre, 0, 360, Round(TotalRadius), Round(TotalRadius * Aspect)); FillEllipse (XCentre, YCentre, Round(TotalRadius), Round(TotalRadius * Aspect)); EquivSum := EquivSum * 10;\nend; ReadLn; CloseGraph;\nend.\nReScience C 6.1 (#13) \u2013 Silberbauer 2020 8\nExamples of hardcopy records for the wetlands project The images in this section are a time sharing sheet for the only personal computer in the Freshwater Research Unit (Figure 3) and part of the analog spreadsheet of wetlands project expenditure (Figure 4). The final figure is a nutritious data reporting format produced three decades later (Figure 5).\nReScience C 6.1 (#13) \u2013 Silberbauer 2020 9\nReScience C 6.1 (#13) \u2013 Silberbauer 2020 10\nReScience C 6.1 (#13) \u2013 Silberbauer 2020 11"}], "title": "Re ReScience challenge: Geographical Trends in the Water Chemistry of Wetlands in the South-Western Cape Province, South Africas", "year": 2020}